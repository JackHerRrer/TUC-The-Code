/********************************************************************************************
                          
                                 strategy_choice
                                        +
                                        |
                                        |
           +----------------------------v----------------------------+
           +---------------------------------------------------------+
           |                            |                            |
           +- is_leek                   +- is_punny_bulb             +- is_..._bulb
           |                            |                            |
+----------v-----------+   +------------v-------------+  +-----------v--------------+
| LEEK_STRATEGY_CHOICE |   |PUNNY_BULB_STRATEGY_CHOICE|  | ..._BULB_STRATEGY_CHOICE |
+----------+-----------+   +------------+-------------+  +-----------+--------------+
           |                            |                            |
           |                            |                            |
          +v----------------------------v----------------------------v-+
                                        |
                                        |
                                        v
                                  action_choice

********************************************************************************************/


include("GlobalVar");
include("util_can_use");
include("util_misc");
include("util_combos");
include("FonctionEtat");

function leekStrategyChoice(){

	
	if (getTurn() == 1){
		first_turn_strategy();
	}

	//else if (getTurn() > 1 && getTurn() < 5){
	//	running_away_strategy();
	//}
	
	else {
		fight_strategy();
	}
	//complete_strategy();
}

function punnyBulbStrategyChoice(){

	var bulbCanUseHelmetIfMoving = canUseIfMoving(CHIP_HELMET,  getCell(ourLeekID),  getLeek(), true,  false);
	var enemyCanUseWeaponIfMoving;
	
	if (getTurn() == 1){
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_TOWARD_LEEK; 		// 0-3 MP
		actionTotal++;
	}
	else {
		if (getWeapon(enemyID) != null){
			enemyCanUseWeaponIfMoving = canUseIfMoving(getWeapon(enemyID),  getCell(ourLeekID),  enemyID, true,  false);
		}
		else {
			enemyCanUseWeaponIfMoving = false;
		}

		if (bulbCanUseHelmetIfMoving != false){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}


		if (enemyCanUseWeaponIfMoving != false && getCooldown(CHIP_HELMET) == 0){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_HELMET; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PEBBLE; 
		actionTotal++;

		if (getLife(ourLeekID) < getTotalLife(ourLeekID && getCooldown(CHIP_BANDAGE) == 0)){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_BANDAGE; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PROTEIN; 
		actionTotal++;
	}
}


function running_away_strategy(){
	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	actionTotal++;

	if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 		// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
}

/********************************************************************************************


               leek_strategy_choice
                        +
                        |
                        |
       +----------------------------------+
       +----------------------------------+
       |                                  |
       |                                  |
       +-  turn 1                         +-  not turn 1
       |                                  |
+------v-----+                     +------v---------------------+
|EQUIP_WEAPON|                     |CALCULATE_LEEK_POSSIBILITIES|
+------+-----+                     +------+---------------------+
       |                                  |
       |                                  |
+------v-----+                     +------v----------------------+
|SUMMON_BULB |                     |CALCULATE_ENEMY_POSSIBILITIES|
+------+-----+                     +------+----------------------+
       |                                  |
       |                           +------v-------+
       |                           |CHECK_STRAT_1 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       |                                  +-------------------+
       |                           +------v-------+
       |                           |CHECK_STRAT_2 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       +---------------+------------------v-------------------v
                       |
                       |
                       v
                 action_choice

********************************************************************************************/

function first_turn_strategy(){


	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = EQUIP_GRENADE_LAUNCHER; 			// 1 TP
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = USE_ARMORING; 	// 6 TP	+ 1 MP
	actionTotal++;

	//actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	//actionTotal++;

}

function fight_strategy(){

	//EXPERIMENTAL


//
//    ID: 7, CHIP_ROCK, cd: 5
//    ID: 18, CHIP_SPARK, cd: 3
//    ID: 20, CHIP_SHIELD, cd: 4
//    ID: 21, CHIP_HELMET, cd: 3                      [3, 4, 5]                                         [[5, 5], [5, 4], [5, 3], [4, 4], [4, 3, 3], [3, 3, 3]]
//    ID: 37, WEAPON_PISTOL, cd: 3
//                       +------------------------+   skillsCostList     +--------------------------+                       +-------------------------+
//             +--------->                        +---------------------->                          |   costCombosList      |                         |
//             |         | generateSkillsCostList |        maxTP         |  generateCostCombosList  +----------------------->  generateCombosList     |
//             |  +------>                        |          +----------->                          |                       |                         |
//    chips +--+  |      +------------------------+                      +--------------------------+                       |     +-----------+       |
//             |  |                                                                                                         |     |           |       |    combosList
//  weapons +-----+                                   [3 : [37, 21], 4 : [1037, 20], 5 : [7]]                               |     | fillCombo |       +-----------+
//             |  |      +------------------------+                                                                         |     |           |       |           |
//             +--------->                        |   skillSortedByCosts                                                    |     +-----------+       |           |
//                |      |    sortSkillsByCost    +------------------------------------------------------------------------->                         |           |
//                +------>                        |                                                                         |                         |           |
//                       +------------------------+                                                                         +-------------------------+           |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//     [[7], [7, 1037], [7, 20], [7, 37], [7, 21],         [[7], [7, 1037], [7, 20], [7, 37], [7, 21],            [[7], [7, 1037], [20, 7], [7, 37], [21, 7],     |
//     [1037, 1037], [1037, 20], [20], [1037, 37, 37],     [1037, 1037], [1037, 20], [20], [1037, 37, 37],        [1037, 1037], [20, 1037], [20], [1037, 37, 37], |
//     [1037, 37, 21], [1037, 21], [20, 37, 37],           [1037, 37, 21], [1037, 21], [20, 37, 37],              [21, 1037, 37], [21, 1037], [20, 37, 37],       |
//     [20, 37, 21], [20, 21], [37, 37, 37],               [20, 37, 21], [20, 21], [37, 37, 37],                  [20, 21, 37], [20, 21], [37, 37, 37],           |
//     [37, 37, 21], [37, 21], [21]]                       [37, 37, 21], [37, 21], [21]]                          [21, 37, 37], [21, 37], [21]]                   |
//                                                                                                                                                                |
//                +-----------------------------------------------------------------------------------------------------------------------------------------------+
//                |
//                |
//                |      +------------------------+                      +--------------------------+                      +-----------------------------+
//                |      |                        |                      |                          |   sortedCombosList   |                             |
//                |      |                        |                      |                          +----------------------+   calculateCombosScore      |
//                |      |      filterCombos      |                      |        sortCombos        |                      |                             |
//                |      |                        |  filteredCombosList  |                          |          skills      | +-------------------------+ |
//                +------>  +------------------+  +---------------------->      +------------+      |               +------+ |                         | |  comboScores
//                       |  | filterCombo      |  |                      |      |            |      |                      | |  calculateComboScore    | +--------+
//                       |  |   * weaponFilter |  |                      |      | sortCombo  |      |    ourLeekCarac      | |                         | |        |
//                       |  |   * ...          |  |                      |      |            |      |               +------+ | * damage_score_function | |        |
//                       |  |                  |  |                      |      +------------+      |                      | | * default_score_function| |        |
//                       |  +------------------+  |                      |                          |  enemyLeekCarac      | | * buff_score_function   | |        |
//                       |                        |                      |                          |               +------+ | * ...                   | |        |
//                       +------------------------+                      +--------------------------+                      | +-------------------------+ |        |
//                                                                                                                         +-----------------------------+        |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//    [[30.5, 0], [30.5, 1], [30.5, 2], [48.0, 3],        [[52.5, 14], [48.0, 3], [35.0, 8], [35.0, 11],                                                          |
//    [30.5, 4], [0, 5], [0, 6], [0, 7], [35.0, 8],       [35.0, 15], [30.5, 0], [30.5, 1], [30.5, 2],                                                            |
//    [17.5, 9], [0, 10], [35.0, 11], [17.5, 12],         [30.5, 4], [17.5, 9], [17.5, 12], [17.5, 16],                                                           |
//    [0, 13], [52.5, 14], [35.0, 15], [17.5, 16],        [0, 5], [0, 6], [0, 7], [0, 10], [0, 13],                                                               |
//    [0, 17]]                                            [0, 17]]                                                                                                |
//                                                                                                                                                                |
//                +-----------------------------------------------------------------------------------------------------------------------------------------------+
//                |
//                |
//                |      +------------------------+
//                |      |                        |   sortedComboScores
//                +------>  sortCombosByScore     +--------------------->
//                       |                        |
//                       +------------------------+
//


	var leekSkills = [];
	pushAll(leekSkills, getChips());
	pushAll(leekSkills, getWeapons());
	for (var skill in leekSkills){
		if (isWeapon(skill))
			debug("ID: " + skill + ", " + getSkillName(skill) + ", cd: " + getWeaponCost(skill));
		else
			debug("ID: " + skill + ", " + getSkillName(skill) + ", cd: " + getChipCost(skill));
	}

	// Calcul des combos
	var maxTP = getTP();

	var nbOp = getOperations();
	skillsCostList = generateSkillsCostList();
	debug("skillsCostList: " + skillsCostList);
	debug("nb instruct generateSkillsCostList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	generateCostCombosList(skillsCostList, maxTP, []);
	debug("costCombosList: " + costCombosList);
	debug("nb instruct generateCostCombosList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortSkillsByCost();
	debug("skillSortedByCosts: " + skillSortedByCosts);
	debug("nb instruct sortSkillsByCost : " + (getOperations() - nbOp));

	nbOp = getOperations();
	generateCombosList();
	debug("combosList" + combosList);
	debug("nb instruct generateCombosList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	filterCombos();
	debug("filteredCombosList: " + filteredCombosList);
	debug("nb instruct filterCombos : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortCombos();
	debug("sortedCombosList: " + sortedCombosList);
	debug("nb instruct sortCombos : " + (getOperations() - nbOp));

	nbOp = getOperations();
	calculateCombosScore();
	debug("comboScores: " + comboScores);
	debug("nb instruct calculateCombosScore : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortCombosByScore();
	debug("sortedComboScores: " + sortedComboScores);
	debug("nb instruct sortCombosByScore : " + (getOperations() - nbOp));

	debug("******************************");
	debug("remaining operation : " + (OPERATIONS_LIMIT - getOperations()));


	debug("total combos : " + count(filteredCombosList));

	debug("Best combo : " + filteredCombosList[sortedComboScores[0][KEY]]);
	debug("second best combo : " + filteredCombosList[sortedComboScores[1][KEY]]);


	//EXPERIMENTAL



	//CALCULATE_LEEK_POSSIBILITIES
	var weCanUseLightningIfMoving = canUseIfMoving(CHIP_LIGHTNING,  getCell(enemyID),  ourLeekID, true,  false);
	var weCanUseWeaponIfMoving = canUseIfMoving(weaponID,  getCell(enemyID),  ourLeekID, true,  false);
	var weCanUseLiberationkIfMoving = canUseIfMoving(CHIP_LIBERATION,  getCell(enemyID),  ourLeekID, true,  false);

	//calculate the area wher our leek can go
	movingArea = getArea(getMP(), getCell());

	//CALCULATE_ENEMY_POSSIBILITIES	
	var enemyCanUseWeaponIfMoving = false;
	if (getWeapon(enemyID) != null && movingArea != null){	
		for (var cell in movingArea){
			if (canUseIfMoving(getWeapon(enemyID), cell, enemyID, false,  true)){
				enemyCanUseWeaponIfMoving = true;
			}
		}
	}
	else {
		enemyCanUseWeaponIfMoving = false;
	}
	var enemyCanUseSparkIfMoving = canUseIfMoving(CHIP_SPARK,  getCell(ourLeekID),  enemyID, false,  false);
	var enemyHasSpark = leekHasChip(CHIP_SPARK, enemyID);

	//PAS BEAU !!! A CHANGER !!! BEURK !!! VALEUR EN DUR !!!
	if ((getTotalLife(ourLeekID) - getLife(ourLeekID) > 600) && getCooldown(CHIP_REGENERATION) == 0){
		TPTotal += 8;
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_REGENERATION;			//4 TP
		actionTotal++;
	}



	if (enemyCanUseWeaponIfMoving == true && getCooldown(CHIP_ARMOR) == 0){
		TPTotal += 12;
		
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_ARMOR;			//4 TP
		actionTotal++;
		
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_FORTRESS; 		//6 TP
		actionTotal++;

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
		actionTotal++;
	}

	//Si en bougeant on ne peut pas attaquer
	else if (weCanUseLightningIfMoving == false  && weCanUseWeaponIfMoving == false){
		if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 				// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			TPTotal += 6;
			
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 	// 6 TP	+ 1 MP
			actionTotal++;
	}
	else {
		if (leekHasChip(CHIP_ARMOR, enemyID) && getCooldown(CHIP_ARMOR, enemyID) > 3){
			TPTotal += 5;

			var selectedCell = null;
			var targetCell = null;
			var shortestPath = -1;
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == CHIP_LIBERATION){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_LIBERATION;			//4 TP
			actionTotal++;
		}

		if (weCanUseLightningIfMoving == true || weCanUseWeaponIfMoving == true){

			var selectedCell = null;
			var targetCell = null;
			var shortestPath = -1;
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == weaponID && action["TARGET_CELL"] == action["INDIRECT_CELL"]){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}

			if (selectedCell != null){
				TPTotal += 12;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;
			}

			if (selectedCell == null){
				for(var key : var cell in actionMap){
					for(var action in cell){
						if (action["OBJECT_ID"] == CHIP_LIGHTNING && action["TARGET_CELL"] == action["INDIRECT_CELL"]){
							if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
								selectedCell = key;
								targetCell = action["INDIRECT_CELL"];
								shortestPath = action["PATH_LENGTH"];
							}
						}
					}
				}
			}

			if (selectedCell != null){

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				if ((getTP() - TPTotal) >= 5){
					TPTotal += 5;
					actionSequence[actionTotal] = []; 	
					actionSequence[actionTotal][0] = USE_OBJECT; 		
					actionSequence[actionTotal][1] = CHIP_LIGHTNING;
					actionSequence[actionTotal][2] = targetCell;
					actionTotal++;
				}

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;
				
			}

			if (selectedCell == null){
				for(var key : var cell in actionMap){
					for(var action in cell){
						if (action["OBJECT_ID"] == CHIP_LIGHTNING && getCellDistance(action["TARGET_CELL"], action["INDIRECT_CELL"]) < 2){
							if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
								selectedCell = key;
								targetCell = action["INDIRECT_CELL"];
								shortestPath = action["PATH_LENGTH"];
							}
						}
					}
				}
			}

			if (selectedCell != null){
				TPTotal += 12;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;

			}

			if (selectedCell == null){
				for(var key : var cell in actionMap){
					for(var action in cell){
						if (action["OBJECT_ID"] == weaponID && getCellDistance(action["TARGET_CELL"], action["INDIRECT_CELL"]) < 2){
							if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
								selectedCell = key;
								targetCell = action["INDIRECT_CELL"];
								shortestPath = action["PATH_LENGTH"];
							}
						}
					}
				}
			}

			if (selectedCell != null){

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				if ((getTP() - TPTotal) >= 5){
					TPTotal += 5;
					actionSequence[actionTotal] = []; 	
					actionSequence[actionTotal][0] = USE_OBJECT; 		
					actionSequence[actionTotal][1] = weaponID;
					actionSequence[actionTotal][2] = targetCell;
					actionTotal++;
				}

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;
				
			}
			if (selectedCell == null){
				for(var key : var cell in actionMap){
					for(var action in cell){
						if (action["OBJECT_ID"] == CHIP_LIGHTNING){
							if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
								selectedCell = key;
								targetCell = action["INDIRECT_CELL"];
								shortestPath = action["PATH_LENGTH"];
							}
						}
					}
				}
			}

			if (selectedCell != null){
				TPTotal += 12;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;

			}

			if (selectedCell == null){
				for(var key : var cell in actionMap){
					for(var action in cell){
						if (action["OBJECT_ID"] == weaponID){
							if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
								selectedCell = key;
								targetCell = action["INDIRECT_CELL"];
								shortestPath = action["PATH_LENGTH"];
							}
						}
					}
				}
			}

			if (selectedCell != null){

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
				actionSequence[actionTotal][1] = selectedCell; 			
				actionTotal++;
				
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;

				if ((getTP() - TPTotal) >= 5){
					TPTotal += 5;
					actionSequence[actionTotal] = []; 	
					actionSequence[actionTotal][0] = USE_OBJECT; 		
					actionSequence[actionTotal][1] = weaponID;
					actionSequence[actionTotal][2] = targetCell;
					actionTotal++;
				}

				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
				actionTotal++;
				
			}
			else {
				debug("error : no cells available");
			}

		}
	}
}
