/********************************************************************************************
                          
                                 strategy_choice
                                        +
                                        |
                                        |
           +----------------------------v----------------------------+
           +---------------------------------------------------------+
           |                            |                            |
           +- is_leek                   +- is_punny_bulb             +- is_..._bulb
           |                            |                            |
+----------v-----------+   +------------v-------------+  +-----------v--------------+
| LEEK_STRATEGY_CHOICE |   |PUNNY_BULB_STRATEGY_CHOICE|  | ..._BULB_STRATEGY_CHOICE |
+----------+-----------+   +------------+-------------+  +-----------+--------------+
           |                            |                            |
           |                            |                            |
          +v----------------------------v----------------------------v-+
                                        |
                                        |
                                        v
                                  action_choice

********************************************************************************************/


include("GlobalVar");
include("util_can_use");
include("util_misc");
include("util_combos");
include("FonctionEtat");

function leekStrategyChoice(){

	
	if (getTurn() == 1){
		first_turn_strategy();
	}

	//else if (getTurn() > 1 && getTurn() < 5){
	//	running_away_strategy();
	//}
	
	else {
		fight_strategy();
	}
	//complete_strategy();
}

function punnyBulbStrategyChoice(){

	var bulbCanUseHelmetIfMoving = canUseIfMoving(CHIP_HELMET,  getCell(ourLeekID),  getLeek(), true,  false);
	var enemyCanUseWeaponIfMoving;
	
	if (getTurn() == 1){
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_TOWARD_LEEK; 		// 0-3 MP
		actionTotal++;
	}
	else {
		if (getWeapon(enemyID) != null){
			enemyCanUseWeaponIfMoving = canUseIfMoving(getWeapon(enemyID),  getCell(ourLeekID),  enemyID, true,  false);
		}
		else {
			enemyCanUseWeaponIfMoving = false;
		}

		if (bulbCanUseHelmetIfMoving != false){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}


		if (enemyCanUseWeaponIfMoving != false && getCooldown(CHIP_HELMET) == 0){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_HELMET; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PEBBLE; 
		actionTotal++;

		if (getLife(ourLeekID) < getTotalLife(ourLeekID && getCooldown(CHIP_BANDAGE) == 0)){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_BANDAGE; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PROTEIN; 
		actionTotal++;
	}
}


function running_away_strategy(){
	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	actionTotal++;

	if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 		// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
}

/********************************************************************************************


               leek_strategy_choice
                        +
                        |
                        |
       +----------------------------------+
       +----------------------------------+
       |                                  |
       |                                  |
       +-  turn 1                         +-  not turn 1
       |                                  |
+------v-----+                     +------v---------------------+
|EQUIP_WEAPON|                     |CALCULATE_LEEK_POSSIBILITIES|
+------+-----+                     +------+---------------------+
       |                                  |
       |                                  |
+------v-----+                     +------v----------------------+
|SUMMON_BULB |                     |CALCULATE_ENEMY_POSSIBILITIES|
+------+-----+                     +------+----------------------+
       |                                  |
       |                           +------v-------+
       |                           |CHECK_STRAT_1 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       |                                  +-------------------+
       |                           +------v-------+
       |                           |CHECK_STRAT_2 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       +---------------+------------------v-------------------v
                       |
                       |
                       v
                 action_choice

********************************************************************************************/

function first_turn_strategy(){


	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] =  EQUIP_WEAPON;
	actionSequence[actionTotal][1] =  WEAPON_GRENADE_LAUNCHER; 
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] =  USE_OBJECT;
	actionSequence[actionTotal][1] =  CHIP_ARMORING; 
	actionSequence[actionTotal][2] =  getCell();
	actionTotal++;

	//actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	//actionTotal++;

}

function fight_strategy(){

//
//    ID: 7, CHIP_ROCK, cd: 5
//    ID: 20, CHIP_SHIELD, cd: 4
//    ID: 21, CHIP_HELMET, cd: 3                      [3, 4, 5]                                         [[5, 5], [5, 4], [5, 3], [4, 4], [4, 3, 3], [3, 3, 3]]
//    ID: 37, WEAPON_PISTOL, cd: 3
//                       +------------------------+   skillsCostList     +--------------------------+                       +-------------------------+
//             +--------->                        +---------------------->                          |   costCombosList      |                         |
//             |         | generateSkillsCostList |        maxTP (10)    |  generateCostCombosList  +----------------------->  generateCombosList     |
//             |  +------>                        |          +----------->                          |                       |                         |
//    chips +--+  |      +------------------------+                      +--------------------------+                       |     +-----------+       |
//             |  |                                                                                                         |     |           |       |    combosList
//  weapons +-----+                                   [3 : [37, 21], 4 : [1037, 20], 5 : [7]]                               |     | fillCombo |       +-----------+
//             |  |      +------------------------+                                                                         |     |           |       |           |
//             +--------->                        |   skillSortedByCosts                                                    |     +-----------+       |           |
//                |      |    sortSkillsByCost    +------------------------------------------------------------------------->                         |           |
//                +------>                        |                                                                         |                         |           |
//                       +------------------------+                                                                         +-------------------------+           |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//     [[7], [7, 1037], [7, 20], [7, 37], [7, 21],         [[7], [7, 1037], [7, 20], [7, 21], [1037, 20],       [[7], [7, 1037], [20, 7], [21, 7], [20, 1037],    |
//     [1037, 1037], [1037, 20], [20], [1037, 37, 37],     [20], [1037, 37, 37], [1037, 37, 21], [1037, 21],    [20], [1037, 37, 37], [21, 1037, 37], [21, 1037], |
//     [1037, 37, 21], [1037, 21], [20, 37, 37],           [20, 21],  [21]]                                     [20, 21], [21]]                                   |
//     [20, 37, 21], [20, 21], [37, 37, 37],                                                                                                                      |
//     [37, 37, 21], [37, 21], [21]]                                                                                                                              |
//                                                                                                                                                                |
//                +-----------------------------------------------------------------------------------------------------------------------------------------------+
//                |
//                |
//                |      +------------------------+                      +--------------------------+                      +-----------------------------+
//                |      |                        |                      |                          |   sortedCombosList   |                             |
//                |      |                        |                      |                          +----------------------+   calculateCombosScore      |
//                |      |      filterCombos      |                      |        sortCombos        |                      |                             |
//                |      |                        |  filteredCombosList  |                          |          skills      | +-------------------------+ |
//                +------>  +------------------+  +---------------------->      +------------+      |               +------> |                         | |  comboScores
//                       |  | filterCombo      |  |                      |      |            |      |                      | |  calculateComboScore    | +--------+
//                       |  |   * weaponFilter |  |                      |      | sortCombo  |      |    ourLeekCarac      | |                         | |        |
//                       |  |   * ...          |  |                      |      |            |      |               +------> | * damage_score_function | |        |
//                       |  |                  |  |                      |      +------------+      |                      | | * default_score_function| |        |
//                       |  +------------------+  |                      |                          |  enemyLeekCarac      | | * buff_score_function   | |        |
//                       |                        |                      |                          |               +------> | * ...                   | |        |
//                       +------------------------+                      +--------------------------+                      | +-------------------------+ |        |
//                                                                                                                         +-----------------------------+        |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//     [[30.5, 0], [30.5, 1], [30.5, 2], [30.5, 3],        [[35.0, 6], [30.5, 0], [30.5, 1], [30.5, 2],                                                           |
//     [0, 4], [0, 5], [35.0, 6], [17.5, 7], [0, 8],       [30.5, 3], [17.5, 7], [0, 4], [0, 5], [0, 8],                                                          |
//     [0, 9], [0, 10]]                                    [0, 9], [0, 10]]                                                                                       |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                +-----------------------------------------------------------------------------------------------------------------------------------------------+
//                |
//                |
//                |      +------------------------+                     +--------------------------+                   +---------------------------------+
//                |      |                        |   sortedComboScores |                          |  allTrajectories  |                                 |   allTrajectories
//                +------>  sortCombosByScore     +--------------------->  generate_trajectories   +------------------->  calculate_trajectories_score   +--------+
//                       |                        |                     |                          |                   |                                 |        |
//                       +------------------------+     enemySkills     |                          |     ourLeekCarac  |                                 |        |
//                                                                +----->                          |            +------>                                 |        |
//                                                                      |                          |                   |                                 |        |
//                                                          enemyID     |                          |   enemyLeekCarac  |                                 |        |
//                                                                +----->                                       +------+                                 |        |
//                                                                      |                          |                   |                                 |        |
//                                                              map     |                          |        dangerMap  |                                 |        |
//                                                                +----->                          |            +------>                                 |        |
//                                                                      +--------------------------+                   +---------------------------------+        |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                                                                                                                                                                |
//                +-----------------------------------------------------------------------------------------------------------------------------------------------+
//                |
//                |
//                |                  +---------------------------------+                           +-------------------------+
//                |                  |                                 |    bestTrajectoryKey      |                         |  actionSequence
//                +------------------>    find_best_trajectory_score   +--------------------------->   fill_action_sequence  +------->
//                                   |                                 |                           |                         |
//                                   +---------------------------------+                           +-------------------------+
//
//
//
//
//

	// displays leek skills (for debug purpose)
	var leekSkills = [];
	pushAll(leekSkills, getChips());
	pushAll(leekSkills, getWeapons());
	for (var skill in leekSkills){
		if (isWeapon(skill))
			debug("ID: " + skill + ", " + getSkillName(skill) + ", cd: " + getWeaponCost(skill));
		else
			debug("ID: " + skill + ", " + getSkillName(skill) + ", cd: " + getChipCost(skill));
	}
	debug("");

	// Calcul des combos
	var maxTP = getTP();

	var nbOp = getOperations();
	skillsCostList = generateSkillsCostList();
	//debug("skillsCostList: " + skillsCostList);
	debug("nb instruct generateSkillsCostList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	generateCostCombosList(skillsCostList, maxTP, []);
	//debug("costCombosList: " + costCombosList);
	debug("nb instruct generateCostCombosList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortSkillsByCost();
	//debug("skillSortedByCosts: " + skillSortedByCosts);
	debug("nb instruct sortSkillsByCost : " + (getOperations() - nbOp));

	nbOp = getOperations();
	generateCombosList();
	//debug("combosList" + combosList);
	debug("nb instruct generateCombosList : " + (getOperations() - nbOp));

	nbOp = getOperations();
	filterCombos();
	//debug("filteredCombosList: " + filteredCombosList);
	debug("nb instruct filterCombos : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortCombos();
	//debug("sortedCombosList: " + sortedCombosList);
	debug("nb instruct sortCombos : " + (getOperations() - nbOp));

	nbOp = getOperations();
	calculateCombosScore();
	//debug("comboScores: " + comboScores);
	debug("nb instruct calculateCombosScore : " + (getOperations() - nbOp));

	nbOp = getOperations();
	sortCombosByScore();
	//debug("sortedComboScores: " + sortedComboScores);
	debug("nb instruct sortCombosByScore : " + (getOperations() - nbOp));

	nbOp = getOperations();
	generate_trajectories();
	debug("all trajectories without score: " + allTrajectories);
	debug("nb instruct generate_trajectories : " + (getOperations() - nbOp));

	nbOp = getOperations();
	calculate_trajectories_score();
	debug("all trajectories with score: " + allTrajectories);
	debug("nb instruct calculate_trajectories_score : " + (getOperations() - nbOp));

	nbOp = getOperations();
	find_best_trajectory_score();
	debug(" ");
	debug("best trajectory key: " + bestTrajectoryKey);
	debug("best trajectory: " + allTrajectories[bestTrajectoryKey]);
	debug("nb instruct generate_trajectories : " + (getOperations() - nbOp));

	nbOp = getOperations();
	fill_action_sequence();
	debug("nb instruct find_best_trajectory_score : " + (getOperations() - nbOp));
	debug("");
	debug("******************************");
	debug("remaining operation : " + (OPERATIONS_LIMIT - getOperations()));

	debug("total combos : " + count(filteredCombosList));
	debug("Best combo : " + filteredCombosList[sortedComboScores[0][KEY]]);
	debug("second best combo : " + filteredCombosList[sortedComboScores[1][KEY]]);


}
