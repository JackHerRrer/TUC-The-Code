/********************************************************************************************
                          
                                 strategy_choice
                                        +
                                        |
                                        |
           +----------------------------v----------------------------+
           +---------------------------------------------------------+
           |                            |                            |
           +- is_leek                   +- is_punny_bulb             +- is_..._bulb
           |                            |                            |
+----------v-----------+   +------------v-------------+  +-----------v--------------+
| LEEK_STRATEGY_CHOICE |   |PUNNY_BULB_STRATEGY_CHOICE|  | ..._BULB_STRATEGY_CHOICE |
+----------+-----------+   +------------+-------------+  +-----------+--------------+
           |                            |                            |
           |                            |                            |
          +v----------------------------v----------------------------v-+
                                        |
                                        |
                                        v
                                  action_choice

********************************************************************************************/


include("GlobalVar");
include("Utilitaires");
include("FonctionEtat");

function leekStrategyChoice(){

	
	if (getTurn() == 1){
		first_turn_strategy();
	}

	//else if (getTurn() > 1 && getTurn() < 5){
	//	running_away_strategy();
	//}
	
	else {
		fight_strategy();
	}
	//complete_strategy();
}

function punnyBulbStrategyChoice(){

	var bulbCanUseHelmetIfMoving = canUseIfMoving(CHIP_HELMET,  getCell(ourLeekID),  getLeek(), true,  false);
	var enemyCanUseWeaponIfMoving;
	
	if (getTurn() == 1){
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_TOWARD_LEEK; 		// 0-3 MP
		actionTotal++;
	}
	else {
		if (getWeapon(enemyID) != null){
			enemyCanUseWeaponIfMoving = canUseIfMoving(getWeapon(enemyID),  getCell(ourLeekID),  enemyID, true,  false);
		}
		else {
			enemyCanUseWeaponIfMoving = false;
		}

		if (bulbCanUseHelmetIfMoving != false){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 
			actionTotal++;
		}


		if (enemyCanUseWeaponIfMoving != false && getCooldown(CHIP_HELMET) == 0){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_HELMET; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PEBBLE; 
		actionTotal++;

		if (getLife(ourLeekID) < getTotalLife(ourLeekID && getCooldown(CHIP_BANDAGE) == 0)){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_BANDAGE; 
			actionTotal++;
		}

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_PROTEIN; 
		actionTotal++;
	}
}


function running_away_strategy(){
	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	actionTotal++;

	if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 		// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
}

/********************************************************************************************


               leek_strategy_choice
                        +
                        |
                        |
       +----------------------------------+
       +----------------------------------+
       |                                  |
       |                                  |
       +-  turn 1                         +-  not turn 1
       |                                  |
+------v-----+                     +------v---------------------+
|EQUIP_WEAPON|                     |CALCULATE_LEEK_POSSIBILITIES|
+------+-----+                     +------+---------------------+
       |                                  |
       |                                  |
+------v-----+                     +------v----------------------+
|SUMMON_BULB |                     |CALCULATE_ENEMY_POSSIBILITIES|
+------+-----+                     +------+----------------------+
       |                                  |
       |                           +------v-------+
       |                           |CHECK_STRAT_1 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       |                                  +-------------------+
       |                           +------v-------+
       |                           |CHECK_STRAT_2 |
       |                           +------+-------+
       |                                  |
       |                                  +-------------------+
       |                                  |                   |
       |                                  |           +-------v----------+
       |                                  |           |FILL_ACTION_ARRAY |
       |                                  |           +-------+----------+
       |                                  |                   |
       +---------------+------------------v-------------------v
                       |
                       |
                       v
                 action_choice

********************************************************************************************/

function first_turn_strategy(){


	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = EQUIP_GRENADE_LAUNCHER; 			// 1 TP
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
	actionTotal++;

	actionSequence[actionTotal] = []; 	
	actionSequence[actionTotal][0] = USE_ARMORING; 	// 6 TP	+ 1 MP
	actionTotal++;

	//actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	//actionTotal++;

}

function fight_strategy(){

	//CALCULATE_LEEK_POSSIBILITIES
	var weCanUseLightningIfMoving = canUseIfMoving(CHIP_LIGHTNING,  getCell(enemyID),  ourLeekID, true,  false);
	var weCanUseStalactiteIfMoving = canUseIfMoving(CHIP_STALACTITE,  getCell(enemyID),  ourLeekID, true,  false);
	var weCanUseWeaponIfMoving = canUseIfMoving(weaponID,  getCell(enemyID),  ourLeekID, true,  false);
	var weCanUseSparkIfMoving = canUseIfMoving(CHIP_SPARK,  getCell(enemyID),  ourLeekID, true,  false);	
	movingArea = getArea(getMP(), getCell());

	//CALCULATE_ENEMY_POSSIBILITIES	
	var enemyCanUseWeaponIfMoving = false;
	if (getWeapon(enemyID) != null && movingArea != null){	
		for (var cell in movingArea){
			if (canUseIfMoving(getWeapon(enemyID), cell, enemyID, false,  true)){
				enemyCanUseWeaponIfMoving = true;
			}
		}
	}
	else {
		enemyCanUseWeaponIfMoving = false;
	}
	var enemyCanUseSparkIfMoving = canUseIfMoving(CHIP_SPARK,  getCell(ourLeekID),  enemyID, false,  false);
	var enemyHasSpark = leekHasChip(CHIP_SPARK, enemyID);

	//PAS BEAU !!! A CHANGER !!! BEURK !!! VALEUR EN DUR !!!
	if ((getTotalLife(ourLeekID) - getLife(ourLeekID) > 600) && getCooldown(CHIP_REGENERATION) == 0){
		TPTotal += 8;
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_REGENERATION;			//4 TP
		actionTotal++;
	}

	if (enemyCanUseWeaponIfMoving == true && getCooldown(CHIP_ARMOR) == 0){
		TPTotal += 10;
		
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_ARMOR;			//4 TP
		actionTotal++;
		
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_FORTRESS; 		//6 TP
		actionTotal++;

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
		actionTotal++;
	}

	//Si en bougeant on ne peut pas attaquer
	else if (weCanUseLightningIfMoving == false && weCanUseStalactiteIfMoving == false && weCanUseWeaponIfMoving == false && weCanUseSparkIfMoving == false){
		if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 				// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			TPTotal += 6;
			
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY; 	// 6 TP	+ 1 MP
			actionTotal++;
	}
	else if (weCanUseLightningIfMoving == true || weCanUseWeaponIfMoving == true){

		var selectedCell = null;
		var targetCell = null;
		var shortestPath = -1;
		for(var key : var cell in actionMap){
			for(var action in cell){
				if (action["OBJECT_ID"] == weaponID && action["TARGET_CELL"] == action["INDIRECT_CELL"]){
					if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
						selectedCell = key;
						targetCell = action["INDIRECT_CELL"];
						shortestPath = action["PATH_LENGTH"];
					}
				}
			}
		}

		if (selectedCell != null){
			TPTotal += 12;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;
		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == CHIP_LIGHTNING && action["TARGET_CELL"] == action["INDIRECT_CELL"]){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			TPTotal += 5;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			if ((getTP() - TPTotal) >= 5){
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = CHIP_LIGHTNING;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;
			}

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;
			
		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == CHIP_LIGHTNING && getCellDistance(action["TARGET_CELL"], action["INDIRECT_CELL"]) < 2){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){
			TPTotal += 12;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;

		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == weaponID && getCellDistance(action["TARGET_CELL"], action["INDIRECT_CELL"]) < 2){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			TPTotal += 5;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			if ((getTP() - TPTotal) >= 5){
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;
			}

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;
			
		}
		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == CHIP_LIGHTNING){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){
			TPTotal += 12;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		// 4 TP
			actionSequence[actionTotal][1] = CHIP_LIGHTNING;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;

		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == weaponID){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			TPTotal += 5;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			if ((getTP() - TPTotal) >= 5){
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;
			}

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;
			
		}
		else {
			debug("error : no cells available");
		}

	}

	/*
	else if ((getTP() - TPTotal) >= 6 && weCanUseStalactiteIfMoving != false){
	//if (getCellToUseWeapon(weaponID, enemyID) != null){	
		TPTotal += 6;		
		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = MOVE_TO_STALACTITE_RANGE;			// 6 TP
		actionTotal++;

		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_STALACTITE;			// 6 TP
		actionTotal++;

	}
	*/
/*
	if ((getTP() - TPTotal) >= 5 && weCanUseWeaponIfMoving != false){
	//if (getCellToUseWeapon(weaponID, enemyID) != null){			
		
		var selectedCell = null;
		var targetCell = null;
		var shortestPath = -1;
		for(var key : var cell in actionMap){
			for(var action in cell){
				if (action["OBJECT_ID"] == weaponID && action["TARGET_CELL"] == action["INDIRECT_CELL"]){
					if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
						selectedCell = key;
						targetCell = action["INDIRECT_CELL"];
						shortestPath = action["PATH_LENGTH"];
					}
				}
			}
		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == weaponID && getCellDistance(action["TARGET_CELL"], action["INDIRECT_CELL"])){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell == null){
			for(var key : var cell in actionMap){
				for(var action in cell){
					if (action["OBJECT_ID"] == weaponID){
						if (shortestPath == -1 || action["PATH_LENGTH"] < shortestPath){
							selectedCell = key;
							targetCell = action["INDIRECT_CELL"];
							shortestPath = action["PATH_LENGTH"];
						}
					}
				}
			}
		}

		if (selectedCell != null){

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TO_CELL; 	
			actionSequence[actionTotal][1] = selectedCell; 			
			actionTotal++;
			
			TPTotal += 5;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_OBJECT; 		
			actionSequence[actionTotal][1] = weaponID;
			actionSequence[actionTotal][2] = targetCell;
			actionTotal++;

			if ((getTP() - TPTotal) >= 5){
				TPTotal += 5;
				actionSequence[actionTotal] = []; 	
				actionSequence[actionTotal][0] = USE_OBJECT; 		
				actionSequence[actionTotal][1] = weaponID;
				actionSequence[actionTotal][2] = targetCell;
				actionTotal++;
			}

			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			
			actionTotal++;
			
		}
		else {
			debug("error : no cells available for weapon");
		}
	}*/

	if ((getTP() - TPTotal) >= 3 && weCanUseSparkIfMoving != false){
		TPTotal += 3;


		actionSequence[actionTotal] = []; 	
		actionSequence[actionTotal][0] = USE_SPARK;			//3 TP
		actionTotal++;

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		/*
		if (enemyHasSpark == false){
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_TOWARD_ENEMY;			//3 TP
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = []; 	
			actionSequence[actionTotal][0] = MOVE_AWAY_FROM_ENEMY;			//3 TP
			actionTotal++;
		}
		*/
	}

}