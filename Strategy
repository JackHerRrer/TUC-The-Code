include("GlobalVar");
include("Utilitaires");
include("FonctionEtat");

function leekStrategyChoice(){

	
	if (getTurn() == 1){
		first_turn_strategy();
	}

	//else if (getTurn() > 1 && getTurn() < 5){
	//	running_away_strategy();
	//}
	
	else {
		fight_strategy();
	}
	//complete_strategy();
}

function punnyBulbStrategyChoice(){

	var bulbCanUseHelmetIfMoving = canUseIfMoving(CHIP_HELMET, getCell(ourLeekID), getLeek(), false);
	var enemyCanUseWeaponIfMoving;
	
	if (getTurn() == 1){
		actionSequence[actionTotal] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
		actionTotal++;
	}
	else {
		if (getWeapon(enemyID) != null){
			enemyCanUseWeaponIfMoving = canUseIfMoving(getWeapon(enemyID), getCell(ourLeekID), enemyID, false);
		}
		else {
			enemyCanUseWeaponIfMoving = -1;
		}

		if (bulbCanUseHelmetIfMoving != -1){
			actionSequence[actionTotal] = MOVE_TO_HELMET_RANGE; 
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = MOVE_TOWARD_LEEK; 
			actionTotal++;
		}


		if (enemyCanUseWeaponIfMoving != -1 && getCooldown(CHIP_HELMET) == 0){
			actionSequence[actionTotal] = USE_HELMET; 
			actionTotal++;
		}

		actionSequence[actionTotal] = USE_PEBBLE; 
		actionTotal++;

		if (getLife(ourLeekID) < getTotalLife(ourLeekID && getCooldown(CHIP_BANDAGE) == 0)){
			actionSequence[actionTotal] = USE_BANDAGE; 
			actionTotal++;
		}

		actionSequence[actionTotal] = USE_PROTEIN; 
		actionTotal++;
	}
}


function first_turn_strategy(){


	actionSequence[actionTotal] = EQUIP_GRENADE_LAUNCHER; 			// 1 TP
	actionTotal++;

	actionSequence[actionTotal] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
	actionTotal++;

	//actionSequence[actionTotal] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	//actionTotal++;

}

function running_away_strategy(){
	actionSequence[actionTotal] = MOVE_AWAY_FROM_ENEMY; 		// 0-3 MP
	actionTotal++;

	if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 		// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			actionSequence[actionTotal] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}


}

function fight_strategy(){

	/*canUseIfMoving(weaponID, 578, ourLeekID, true);
	canUseIfMoving(weaponID, 0, ourLeekID, true);
		canUseIfMoving(weaponID, 612, ourLeekID, true);
		canUseIfMoving(weaponID, 17, ourLeekID, true);
				canUseIfMoving(weaponID, 604, ourLeekID, true);
		canUseIfMoving(weaponID, 279, ourLeekID, true);
		canUseIfMoving(weaponID, 306, ourLeekID, true);
*/


	//canUseIfMoving(weaponID, 438, ourLeekID, true);
	canUseIfMoving(CHIP_LIGHTNING, 367, ourLeekID, true);
	//canUseIfMoving(weaponID, 559, ourLeekID, true);



	var weCanUseLightningIfMoving = canUseIfMoving(CHIP_LIGHTNING, getCell(enemyID), ourLeekID, false);
	var weCanUseStalactiteIfMoving = canUseIfMoving(CHIP_STALACTITE, getCell(enemyID), ourLeekID, false);
	var weCanUseWeaponIfMoving = canUseIfMoving(weaponID, getCell(enemyID), ourLeekID, true);
	var weCanUseSparkIfMoving = canUseIfMoving(CHIP_SPARK, getCell(enemyID), ourLeekID, false);	
	var enemyCanUseWeaponIfMoving;
	if (getWeapon(enemyID) != null){	
		enemyCanUseWeaponIfMoving = canUseIfMoving(getWeapon(enemyID), getCell(ourLeekID), enemyID, false);
	}
	else {
		enemyCanUseWeaponIfMoving = -1;
	}
	var enemyCanUseSparkIfMoving = canUseIfMoving(CHIP_SPARK, getCell(ourLeekID), enemyID, false);
	var enemyHasSpark = leekHasChip(CHIP_SPARK, enemyID);


	if (enemyCanUseWeaponIfMoving != -1 && getCooldown(CHIP_FORTRESS) == 0){
		TPTotal += 10;

		actionSequence[actionTotal] = USE_SHIELD;			//4 TP
		actionTotal++;

		actionSequence[actionTotal] = USE_FORTRESS; 		//6 TP
		actionTotal++;
	}

	//Si en bougeant on ne peut pas attaquer
	else if (weCanUseLightningIfMoving == -1 && weCanUseStalactiteIfMoving == -1 && weCanUseWeaponIfMoving == -1 && weCanUseSparkIfMoving == -1){
		if (getCooldown(CHIP_PUNY_BULB) == 0 ){ 				// 6 on vérifie qu'on est pas en cooldown et qu'on a pas déjà invoqué un bulbes
			TPTotal += 6;
			actionSequence[actionTotal] = SUMMON_PUNNY_BULB; 	// 6 TP	+ 1 MP
			actionTotal++;
		}
	}
	else if (weCanUseLightningIfMoving != -1){
		TPTotal += 12;
		actionSequence[actionTotal] = MOVE_TO_LIGHTNING_RANGE; 		// 0-4 MP
		actionTotal++;

		actionSequence[actionTotal] = USE_LIGHTNING; 		// 4 TP
		actionTotal++;

		actionSequence[actionTotal] = USE_LIGHTNING; 		// 4 TP
		actionTotal++;

		actionSequence[actionTotal] = USE_LIGHTNING; 		// 4 TP
		actionTotal++;

	}
	else if ((getTP() - TPTotal) >= 6 && weCanUseStalactiteIfMoving != -1){
	//if (getCellToUseWeapon(weaponID, enemyID) != null){	
		TPTotal += 6;		
		actionSequence[actionTotal] = MOVE_TO_STALACTITE_RANGE;			// 6 TP
		actionTotal++;

		actionSequence[actionTotal] = USE_STALACTITE;			// 6 TP
		actionTotal++;

	}

	if ((getTP() - TPTotal) >= 5 && weCanUseWeaponIfMoving != -1){
	//if (getCellToUseWeapon(weaponID, enemyID) != null){			
		actionSequence[actionTotal] = MOVE_TO_WEAPON_RANGE; 		// 0-4 MP
		actionTotal++;

		TPTotal += 5;
		actionSequence[actionTotal] = USE_WEAPON;			// 5 TP
		actionTotal++;

		if ((getTP() - TPTotal) >= 5){
			TPTotal += 5;
			actionSequence[actionTotal] = USE_WEAPON;			//5 TP
			actionTotal++;
		}
	}

	if ((getTP() - TPTotal) >= 3 && weCanUseSparkIfMoving != -1){
		TPTotal += 3;

		//actionSequence[actionTotal] = MOVE_TO_SPARK_RANGE;			//3 TP
		//actionTotal++;

		actionSequence[actionTotal] = USE_SPARK;			//3 TP
		actionTotal++;

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		if ((getTP() - TPTotal) >= 3){
			TPTotal += 3;
			actionSequence[actionTotal] = USE_SPARK;			//3 TP
			actionTotal++;
		}

		/*
		if (enemyHasSpark == false){
			actionSequence[actionTotal] = MOVE_TOWARD_ENEMY;			//3 TP
			actionTotal++;
		}
		else {
			actionSequence[actionTotal] = MOVE_AWAY_FROM_ENEMY;			//3 TP
			actionTotal++;
		}
		*/
	}

}