//-------------------------------------------------------------
//------------------Fonctions utilitaires----------------------
//-------------------------------------------------------------
include("GlobalVar");


function getDamage(ID, strength) {	
	var damage = [];
	
	if(isChip(ID)) {
	
		var chipEffects = getChipEffects(ID);
		
		for (var chipEffect in chipEffects) {
			if(chipEffect[0] == EFFECT_DAMAGE) {
				var chipDamage = [];
				chipDamage["MIN"] = chipEffect[1] * (1+strength/100);
				chipDamage["MAX"] = chipEffect[2] * (1+strength/100);
				push(damage, chipDamage);
			}
		}
	} else if (isWeapon(ID)) {
		var weaponEffects = getWeaponEffects(ID);
		
		for (var weaponEffect in weaponEffects) {
			if(weaponEffect[0] == EFFECT_DAMAGE) {
				var weaponDamage = [];
				weaponDamage["MIN"] = weaponEffect[1] * (1+strength/100);
				weaponDamage["MAX"] = weaponEffect[2] * (1+strength/100);
				push(damage, weaponDamage);
			}	
		}
	} else {
		debug("Ni puce ni arme !!");
	}
	return damage;
}

/******************************************************************************************/

function calculateDamage(leekID, damage) {	
	return damage * (1 - getRelativeShield(leekID) / 100) - getAbsoluteShield(leekID);
}

/******************************************************************************************/

function isEven(number){
	if ((number % 2) == 0){
		return true;
	}
	else {
		return false;
	}
}

/*****************************************************************************************/
/*
Return the cells that will be affected by the object (weapon or chip) if it is used on targetCell

-------------------------
|   |   |   |   |   |   |  	1 = targetCell
-------------------------
|   |   |   |   |   |   | 	2 = indirectCells
-------------------------
|   |   |   |   | 2 |   | 	
-------------------------
|   |   |   | 2 | 1 | 2 | 
-------------------------
|   |   |   |   | 2 |   | 
-------------------------
*/

function getCellsAffected(objectID, targetCell){		// environ 400 op

	//varaiable that will store the cells affected
	var indirectCells = [];

	//get the type of area
	var area;
	if(isWeapon(objectID)) {
		area = getWeaponArea(objectID);
	}
	else if(isChip(objectID)) {
		area = getChipArea(objectID);
	}
	else {
		debug("Object is not a chip or a weapon");
		return null;
	}


	//check that the type of the area is not NULL
	if (area == null){
		debug("area is null");
	}
	else {
		push(indirectCells, targetCell);
	
	 	if (area == AREA_CIRCLE_1 || area == AREA_CIRCLE_2 || area == AREA_CIRCLE_3){
			//haut 0	
			if (targetCell % 35 != 0 && (targetCell-18) % 35 != 0) 		push(indirectCells, targetCell - 1); 	//gauche			
			if ((targetCell-17) % 35 != 0 && (targetCell-34) % 35 != 0) push(indirectCells, targetCell + 1);	//droite

			//haut 1
			if (targetCell > 17){
				if (targetCell % 35 != 0)		push(indirectCells, targetCell - 18); //gauche
				if ((targetCell-17) % 35 != 0) 	push(indirectCells, targetCell - 17);	//droite
			}

			//bas 1
			if (targetCell < 595){
				if ((targetCell-17) % 35 != 0) 	push(indirectCells, targetCell + 18); //droite
				if (targetCell % 35 != 0) 		push(indirectCells, targetCell + 17); //gauche
			}

		}
		
		if (area == AREA_CIRCLE_2 || area == AREA_CIRCLE_3){
			//haut 2
			if (targetCell > 34){
				push(indirectCells, targetCell - 35);																//milieu
				if (targetCell % 35 != 0 && (targetCell-18) % 35 != 0) 		push(indirectCells, targetCell - 36); //gauche
				if ((targetCell-17) % 35 != 0 && (targetCell-34) % 35 != 0) push(indirectCells, targetCell - 34);	//droite 
			}

			//bas 2
			if (targetCell < 560){
				push(indirectCells, targetCell + 35);																//milieu
				if ((targetCell-17) % 35 != 0 && (targetCell-34) % 35 != 0) push(indirectCells, targetCell + 36);	//droite
				if (targetCell % 35 != 0 && (targetCell-18) % 35 != 0) 		push(indirectCells, targetCell + 34);	//gauche
			}
		}
		
		if (area == AREA_CIRCLE_3){
			//à compléter
		}
	}
	
	return indirectCells;
}


/********************************************************************************************************/
/*

-------------------------
|   |   |   |   |   |   |  	1 = targetCell
-------------------------
|   |   |   | 3 | 3 | 3 | 	2 = indirectCells
-------------------------
|   |   | 3 | 3 | 2 | 3 | 	3 = cellFromWhereToUseObject
-------------------------
|   |   | 3 | 2 | 1 | 2 | 
-------------------------
|   |   | 3 | 3 | 2 | 3 | 
-------------------------

*/


function canUseIfMoving(objectID, targetCell, user, markCells) {

	var instruct1 = getOperations();
	var indirectCells = getCellsAffected(objectID, targetCell);
	var canUse = false;

	if (indirectCells == null){
		debug("indirectCells is null");
		push(indirectCells, targetCell);
	}

	var MPAvailable = getMP(user);

	var cellsFromWhereToUseObject = [];
	for (var indirectCell in indirectCells){
		if(isWeapon(objectID)) {
			cellsFromWhereToUseObject = getCellsToUseWeaponOnCell(objectID, indirectCell);
		}
		else if(isChip(objectID)) {
			cellsFromWhereToUseObject = getCellsToUseChipOnCell(objectID, indirectCell);	
		}
		else {
			debug("Object is not a chip or a weapon");
			return null;
		}


		if (cellsFromWhereToUseObject !== []){ 
			for (var cellFromWhereToUseObject in cellsFromWhereToUseObject){
				//optimisation : Si une action de ce type est déjà enregistré dans actionMap on en rajoute pas (c'est une perte de donnée acceptable)
				var cellAlreadyAnalysed = false;
				for (var action in actionMap[cellFromWhereToUseObject]){
					if (action[0] == objectID){
						cellAlreadyAnalysed = true;
					}
				}
				if (cellAlreadyAnalysed == false){
					//optimisation : la longueur du chemin n'est pas calculé, si la distance sans obstacle est superieur au nombre de MP
					if (getCellDistance(cellFromWhereToUseObject,getCell(user)) <= MPAvailable){
						var pathLength = getPathLength(getCell(user), cellFromWhereToUseObject);
						if (pathLength != null){
							if (pathLength <= MPAvailable ){
								var data = [];
								data[0] = objectID;
								data[1]	= targetCell;
								data[2]	= indirectCell;
								data[3] = pathLength;	
								if (actionMap[cellFromWhereToUseObject] == null){
									actionMap[cellFromWhereToUseObject] = [];
								}
								push(actionMap[cellFromWhereToUseObject], data);
								canUse = true;
								if (markCells){
									if (indirectCell == targetCell){
										mark(cellFromWhereToUseObject, getColor(200, 50, 50));
									}
									else {
										mark(cellFromWhereToUseObject, getColor(200, 50, 150));
									}
								}
							}
						}
					}
				}
			}
		}
		else { 
			debug("cellsToUseWeapon is null");
		}
	}	

	var instruct2 = getOperations();
	debug("can use if moving operation : " + (instruct2 - instruct1));
	return canUse;
}

/********************************************************************************************/

function leekHasChip(chipID, leekID){
	var chips = getChips(leekID);
	
	if (chips != null){
		for (var chip in chips){
			if (chip == chipID){
				return true;
			}
		}
	}
	else {
		debug ("chips is NULL");
	}
	return false;
}
