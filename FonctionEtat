include("GlobalVar");
include("Utilitaires");
include("Strategy");
include("IA");

function initGameFunction(){
	//debug("init game state");

	var enemyList = getAliveEnemies();
	for (var i = 0; i < count(enemyList) && enemyID == null; i++){
		if (getType(enemyList[i]) == ENTITY_LEEK){
			enemyID = enemyList[i];
		}
	}

	if (enemyID == null){
		debug("no enemy selected");
	}
	ourLeekID = getLeek();

	etat = INIT_TURN;
}

function initTurnFunction(){
	//debug("init turn state");	

	//raz de la liste des actions à effectuer
	actionSequence = [];
	currentAction = 0;
	actionTotal = 0;
	TPTotal = 0;
	
	actionMap = [];
	instructionsCount = 0;

	etat = STRATEGY_CHOICE;
}

function strategyChoiceFunction(){
	//debug("strategy choice state"); 

	if (getType() == ENTITY_LEEK){
		leekStrategyChoice();
	}
	else {
		punnyBulbStrategyChoice();
	}

	debug("******************************");
	for (var i = 0; i < actionTotal; i++){
		debug(actionSequence[i]);
	}
	debug("TP total : "+ TPTotal);
	debug("******************************\n");

	etat = ACTION_CHOICE;	
}


function actionChoiceFunction(){
	//debug("action choice state"); 

	if (currentAction < actionTotal){
		etat = actionSequence[currentAction];
		currentAction++;
	}
	else {
		etat = LAST_ACTION;
	}
	
}

function equipShotgunFunction(){
	debug("equip shotgun state"); 	
	setWeapon(WEAPON_SHOTGUN); // Attention : coûte 1 PT
	weaponID = getWeapon();

	etat = ACTION_CHOICE;
}

function equipMagnumFunction(){
	debug("equip magnum state"); 	
	setWeapon(WEAPON_MAGNUM); // Attention : coûte 1 PT
	weaponID = getWeapon();

	etat = ACTION_CHOICE;
}


function equipGrenadeLauncherFunction(){
	debug("equip grenadeLauncher state"); 	
	setWeapon(WEAPON_GRENADE_LAUNCHER); // Attention : coûte 1 PT
	weaponID = getWeapon();

	etat = ACTION_CHOICE;
}

function moveTowardEnemyFunction (){
	debug("move toward enemy state"); 	
	moveToward(enemyID);

	etat = ACTION_CHOICE;
}

function moveAwayFromEnemyFunction(){
	debug("move away from enemy state"); 	
	moveAwayFrom(enemyID);

	etat = ACTION_CHOICE;
}

function summonPunnyBulbFunction(){
	debug("summon punny bulb state"); 	
	
	var summoningCell = getCell();
	moveToward(enemyID, 1);
	summon(CHIP_PUNY_BULB, summoningCell, stateMachine);

	etat = ACTION_CHOICE;
}

function moveTowardLeekFunction(){
	debug("move toward leek state"); 	

	moveToward(ourLeekID);

	etat = ACTION_CHOICE;	
}

function moveToWeaponRangeFunction(){
	debug("move to weapon range state"); 	

	moveTowardCell(canUseIfMoving((weaponID), getCell(enemyID), getLeek(), false));

	etat = ACTION_CHOICE;
}

function moveToLightningRangeFunction(){
	debug("move to lightning range state"); 	

	moveTowardCell(canUseIfMoving(CHIP_LIGHTNING, getCell(enemyID), getLeek(), false));

	etat = ACTION_CHOICE;
}

function moveToStalactiteRangeFunction(){
	debug("move to stalactite range state"); 	

	moveTowardCell(canUseIfMoving(CHIP_STALACTITE, getCell(enemyID), getLeek(), false));

	etat = ACTION_CHOICE;

}

function moveToSparkRangeFunction(){
	debug("move to spark range state"); 	

	moveTowardCell(canUseIfMoving(CHIP_SPARK, getCell(enemyID), getLeek(), false));

	etat = ACTION_CHOICE;

}

function moveToHelmetRangeFunction(){
	debug("move to helmet range state"); 	

	moveTowardCell(canUseIfMoving(CHIP_HELMET, ourLeekID, getLeek(), false));

	etat = ACTION_CHOICE;
}

function useWeaponFunction(){
	debug("use weapon state"); 	

	useWeapon(enemyID);

	etat = ACTION_CHOICE;	
}

function useBandageFunction(){
	debug("use bandage state");

	useChip(CHIP_BANDAGE, ourLeekID);

	etat = ACTION_CHOICE;	
}

function useStalactiteFunction(){
	debug("use stalactite state");

	useChip(CHIP_STALACTITE, enemyID);

	etat = ACTION_CHOICE;
}

function useRockFunction(){
	debug("use rock state");

	useChip(CHIP_ROCK, enemyID);

	etat = ACTION_CHOICE;
}

function usePebbleFunction(){
	debug("use pebble state");

	useChip(CHIP_PEBBLE, enemyID);

	etat = ACTION_CHOICE;
}


function useHelmetFunction(){
	debug("use helmet state");

	useChip(CHIP_HELMET, ourLeekID);

	etat = ACTION_CHOICE;
}

function useShieldFunction(){
	debug("use SHIELD state");

	useChip(CHIP_SHIELD, ourLeekID);

	etat = ACTION_CHOICE;
}

function useFortressFunction(){
	debug("use fortress state");

	useChip(CHIP_FORTRESS, ourLeekID);

	etat = ACTION_CHOICE;
}

function useRampartFunction(){
	debug("use rampart state");

	useChip(CHIP_RAMPART, ourLeekID);

	etat = ACTION_CHOICE;
}

function useProteinFunction(){
	debug("use protein state");

	useChip(CHIP_PROTEIN, ourLeekID);

	etat = ACTION_CHOICE;
}

function useSparkFunction(){
	debug("use spark state");

	useChip(CHIP_SPARK, enemyID);

	etat = ACTION_CHOICE;
}

function useLightningFunction(){
	debug("use lightning state");

	useChip(CHIP_LIGHTNING, enemyID);

	etat = ACTION_CHOICE;
}



function lastActionFunction() {

	if (isDead(enemyID)){say ("Reviens gamin !! C'était pour rire ");}
	else if (getTurn() == 2){
		if (getType() == ENTITY_LEEK){
			say("Une larme de gin. Une rivière de tonic... Et ensuite la p'tite victime");
		}
		else {
			say("Pigeon, oiseau à la grise robe, dans l'enfer des villes, à mon regard tu te dérobes...Tu es vraiment le plus agile. ");
		}
	}

	etat = END_TURN;
}

